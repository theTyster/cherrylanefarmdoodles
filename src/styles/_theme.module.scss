// Colors
$white: #f4f2f1;
$lightGray: #dfdbd7;
$gray: #655c53;
$darkGray: #46403a;
$black: #333;

$lightPrimary: $lightGray; // Contrast level used for Backgrounds
$primary: $gray; // Contrast level used for large text
$darkPrimary: $black; // Contrast level used for small text

$lightSecondaryGreen: #d3e8ca;
$secondaryGreen: #426932;
$darkSecondaryGreen: #2e4922;

$lightTertiaryCherry: #ffc9d8;
$tertiaryCherry: #b81641;
$darkTertiaryCherry: #850829;

$lightAccentBlue: #bbe1f2;
$accentBlue: #124559;

$lightMom: $lightTertiaryCherry;
$lightDad: $lightAccentBlue;
$darkMom: $tertiaryCherry;
$darkDad: $accentBlue;

// Outlines and Shadows
$boxShadowX: 9; // Needs to be populated in the mixin.
$boxShadowY: 12; // Needs to be populated in the mixin.
$boxShadowBlur: 15; // Needs to be populated in the mixin.
$outlineWidth: 9px;
$momOutline: $outlineWidth solid $lightMom;
$dadOutline: $outlineWidth solid $lightDad;
$unrecordedDogOutline: $outlineWidth solid $lightSecondaryGreen;
$momShadow: 0 0 0 calc($outlineWidth * 0.667) $lightTertiaryCherry;
$dadShadow: 0 0 0 calc($outlineWidth * 0.667) $lightAccentBlue;
$unrecordedDogShadow: 0 0 0 calc($outlineWidth * 0.667) $lightSecondaryGreen;

// Hover Effects
$scaleOnHover: 1.07;
$translateOnHover: 0.5rem;

$transitionShort: 0.2;
$transitionFancy: 0.5;

// Sizing
$tabletViewport: 1200px;
$LgPhoneViewport: 750px;
$SmPhoneViewport: 390px;
$microViewport: 300px;
$watchViewport: 200px;
// Smallest allowable width is currently 96px

// Spacing
$spaceBetweenElements: 30px;

//Etc
$XsmallButtonRadius: 0.375rem; // 6px
$smallButtonRadius: 0.5rem; // 8px
$buttonRadius: 0.875rem; // 14px
$bigButtonRadius: 2rem; // 32px
$Headshots_LgRadius: 3.1875rem; // 51px
$Headshots_SmRadius: 100%;
$Headshots_Sm: 292px;
$Headshots_Lg: 500px;
$Group_Photos: 600px;

// Fonts
$h1: 51px;
$h2: calc(51px - 10px);
$h3: calc(51px - 20px);
$h4: calc(51px - 30px);

@mixin setTextValues() {
  p,
  h1,
  h2,
  h3,
  h4,
  li,
  th,
  tr {
    @content;
  }
}

@mixin setImageValues() {
  img,
  video {
    @content;
  }
}

@mixin mediaQuery($breakpoint, $w: null) {
  @if ($w) {
    @media screen and (#{$w}-width: $breakpoint) {
      @content;
    }
  } @else {
    @media screen and (max-width: $breakpoint) {
      @content;
    }
  }
}

@mixin setFlex($direction: row, $justify: center, $align: center) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin setBoxShadow($color, $isHover: false) {
  $x: 0px;
  $y: 0.75rem;
  $blur: 1rem;
  box-shadow: $color $x $y $blur;

  @if $isHover == "hover" {
    &:hover {
      $y: 1.5rem;
      $blur: 1.5rem;
      box-shadow: $color $x $y $blur;
    }
  }
}

@mixin imageHover($color) {
  @include setBoxShadow($color, "hover");

  transition-property: transform, box-shadow;
  transition-duration: $transitionShort;

  &:hover {
    transform: translateY($translateOnHover);
  }
  &:active {
    transform: translateY(calc($translateOnHover + 0.3rem));
    box-shadow: none;
  }
}

@mixin scaleOnHover($scale: $scaleOnHover) {
  transition: transform 0.1s;
  &:hover {
    transform: scale($scale);
    @content;
  }
}

@mixin woodgrain($wide: false) {
//  .woodgrain {
//    @content;
//    background-size: cover;
//    background-position: center;
//    background-image: url("~/public/images/woodgrain-dark.svg");
//    &-light {
//      background-image: url("~/public/images/woodgrain-light.svg");
//      background-size: cover;
//      background-position: center;
//    }
//    @if $wide {
//      background-image: url("~/public/images/woodgrain-dark-wide.svg");
//      &-light {
//        background-image: url("~/public/images/woodgrain-light-wide.svg");
//      }
//    }
//  }
}

@include mediaQuery($tabletViewport, min) {
  .desktopOnly {
    display: block;
  }
  .tabletOnly {
    display: none;
  }
  .phoneOnly {
    display: none;
  }
  .mobileOnly {
    display: none;
  }
}
@include mediaQuery($tabletViewport) {
  .desktopOnly {
    display: none;
  }
  .tabletOnly {
    display: block;
  }
  .phoneOnly {
    display: none;
  }
  .mobileOnly {
    display: block;
  }
}
@include mediaQuery($LgPhoneViewport) {
  .desktopOnly {
    display: none;
  }
  .tabletOnly {
    display: none;
  }
  .phoneOnly {
    display: block;
  }
  .mobileOnly {
    display: block;
  }
}
@include mediaQuery($SmPhoneViewport) {
  .desktopOnly {
    display: none;
  }
  .tabletOnly {
    display: none;
  }
  .phoneOnly {
    display: block;
  }
  .mobileOnly {
    display: block;
  }
}

// Vim macro for formatting variable names:
// f:hv0wyf;hvF:lp0wxj
:export {
  Group_Photos: $Group_Photos;
  Headshots_Lg: $Headshots_Lg;
  Headshots_LgRadius: $Headshots_LgRadius; // 51px
  Headshots_Sm: $Headshots_Sm;
  Headshots_SmRadius: $Headshots_SmRadius;
  LgPhoneViewport: $LgPhoneViewport;
  SmPhoneViewport: $SmPhoneViewport;
  accentBlue: $accentBlue;
  bigButtonRadius: $bigButtonRadius; // 32px
  black: $black;
  boxShadowBlur: $boxShadowBlur; // Needs to be populated in the mixin.
  boxShadowX: $boxShadowX; // Needs to be populated in the mixin.
  boxShadowY: $boxShadowY; // Needs to be populated in the mixin.
  buttonRadius: $buttonRadius; // 14px
  dadOutline: $dadOutline;
  dadShadow: $dadShadow;
  darkDad: $darkDad;
  darkGray: $darkGray;
  darkMom: $darkMom;
  darkPrimary: $darkPrimary;
  darkSecondaryGreen: $darkSecondaryGreen;
  darkTertiaryCherry: $darkTertiaryCherry;
  gray: $gray;
  h1: $h1;
  h2: $h2;
  h3: $h3;
  h4: $h4;
  lightAccentBlue: $lightAccentBlue;
  lightDad: $lightDad;
  lightMom: $lightMom;
  lightPrimary: $lightPrimary;
  lightSecondaryGreen: $lightSecondaryGreen;
  lightTertiaryCherry: $lightTertiaryCherry;
  microViewport: $microViewport;
  momOutline: $momOutline;
  momShadow: $momShadow;
  outlineWidth: $outlineWidth;
  primary: $primary;
  scaleOnHover: $scaleOnHover;
  secondaryGreen: $secondaryGreen;
  spaceBetweenElements: $spaceBetweenElements;
  tabletViewport: $tabletViewport;
  tertiaryCherry: $tertiaryCherry;
  transitionFancy: $transitionFancy;
  transitionShort: $transitionShort;
  watchViewport: $watchViewport;
  white: $white;
  woodgrain: woodgrain();
}
